// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: notas.proto

package notas

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Notas_AddNotas_FullMethodName = "/notas.Notas/AddNotas"
)

// NotasClient is the client API for Notas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotasClient interface {
	AddNotas(ctx context.Context, in *NotaData, opts ...grpc.CallOption) (*Reply, error)
}

type notasClient struct {
	cc grpc.ClientConnInterface
}

func NewNotasClient(cc grpc.ClientConnInterface) NotasClient {
	return &notasClient{cc}
}

func (c *notasClient) AddNotas(ctx context.Context, in *NotaData, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, Notas_AddNotas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotasServer is the server API for Notas service.
// All implementations must embed UnimplementedNotasServer
// for forward compatibility
type NotasServer interface {
	AddNotas(context.Context, *NotaData) (*Reply, error)
	mustEmbedUnimplementedNotasServer()
}

// UnimplementedNotasServer must be embedded to have forward compatible implementations.
type UnimplementedNotasServer struct {
}

func (UnimplementedNotasServer) AddNotas(context.Context, *NotaData) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNotas not implemented")
}
func (UnimplementedNotasServer) mustEmbedUnimplementedNotasServer() {}

// UnsafeNotasServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotasServer will
// result in compilation errors.
type UnsafeNotasServer interface {
	mustEmbedUnimplementedNotasServer()
}

func RegisterNotasServer(s grpc.ServiceRegistrar, srv NotasServer) {
	s.RegisterService(&Notas_ServiceDesc, srv)
}

func _Notas_AddNotas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotaData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotasServer).AddNotas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notas_AddNotas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotasServer).AddNotas(ctx, req.(*NotaData))
	}
	return interceptor(ctx, in, info, handler)
}

// Notas_ServiceDesc is the grpc.ServiceDesc for Notas service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notas_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notas.Notas",
	HandlerType: (*NotasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNotas",
			Handler:    _Notas_AddNotas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notas.proto",
}
